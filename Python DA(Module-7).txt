1)	What are the types of Applications?
Answer :-
An application, often called an app, is software designed to perform specific tasks for users. It can run on devices like computers, smartphones, and tablets. Examples include web browsers, games, and word processors.

Types of Applications:
A.	Web Applications :- Run on web browsers and are accessed through URLs.
Examples: Google Docs, Facebook, Amazon.

B.	Mobile Applications: Designed specifically for mobile devices.
Types: Native (built for specific platforms like iOS or Android), Hybrid (use web technologies but run inside a native container), and Web (accessed through mobile web browsers).
Examples: Instagram (native), Uber (hybrid), Google (web).

C.	Desktop Applications: Installed on personal computers and run locally.
Examples: Microsoft Office, Adobe Photoshop, VLC Media Player.

D.	Enterprise Applications: Large-scale software systems used to manage and integrate business operations.
Examples: SAP, Oracle ERP, Salesforce.

E.	Cloud Applications: Applications that run on cloud infrastructure, allowing access from any internet-connected device.
Examples: Google Drive, Microsoft Azure, Dropbox.

F.	Embedded Applications: Software designed to operate within another device or system.
Examples: Software in smart appliances, automotive control systems, medical devices.

G.	System Software: Designed to provide core functions such as operating systems, disk management, utilities, hardware management, and other operational necessities.
Examples: Windows OS, Linux, macOS.

H.	Utility Software: Provides system maintenance and management functions.
Examples: Antivirus programs, backup software, disk cleaners.

I.	Database Applications: Software used to manage and manipulate databases.
Examples: MySQL, Oracle Database, Microsoft SQL Server.

J.	Multimedia Applications: Used for creating, editing, and playing multimedia content.
Examples: Adobe Premiere Pro, VLC Media Player, Spotify.

K.	Educational Applications: Designed for educational purposes to facilitate learning and teaching.
Examples: Duolingo, Khan Academy, Google Classroom.

L.	Game Applications: Designed for entertainment, often with interactive elements.
Examples: Fortnite, Minecraft, Candy Crush Saga.

M.	Artificial Intelligence Applications: Use AI technologies to perform tasks that usually require human intelligence.
Examples: Chatbots, recommendation systems, facial recognition software.

N.	Communication Applications: Facilitate communication between users.
Examples: WhatsApp, Slack, Zoom.


2)	What is programming?
Answer :-
Programming, also known as coding, is the process of creating a set of instructions that tell a computer how to perform a specific task. These instructions, called programs, are written in a language that the computer can understand and execute.

3)	What is Python?
Answer :-
Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.

4)	Write a Python program to check if a number is positive, negative or zero.
Answer :-
number = float(input("Enter a number: "))
if number > 0:
print("The number is positive.")
elif number < 0:
print("The number is negative.")
else:
print("The number is zero.")
OUTPUT :-
Enter a number:  10
The number is positive.

Enter a number:  0
The number is zero.


5)	Write a Python program to get the Factorial number of given numbers.
Answer :-
number = int(input("Enter a number: "))

factorial = 1

if number < 0:
print("Factorial does not exist for negative numbers.")
elif number == 0:
print("The factorial of 0 is 1.")
else:
for i in range(1, number + 1):
factorial *= i
print(f"The factorial of {number} is {factorial}.")

OUTPUT:
Enter a number:  5
The factorial of 5 is 120.

6)	Write a Python program to get the Fibonacci series of given range.
Answer :-
range_limit = int(input("Enter the range limit for Fibonacci series: "))

a = 0
b = 1
print("Fibonacci Series:")
print(a)
print(b)

while b < range_limit:
a, b = b, a + b
if b < range_limit:
print(b)

OUTPUT:-
Enter the range limit for Fibonacci series:  50
Fibonacci Series:
0
1
1
2
3
5
8
13
21
34


7)	How memory is managed in Python?
Answer :-
Memory management is handled automatically by the Python interpreter through a private heap space. Here are some key aspects of memory management in Python:
1.	Automatic Memory Allocation and Deallocation:
•	Python uses a built-in memory manager to manage memory allocation and deallocation automatically. This means developers do not need to manually allocate or deallocate memory as in lower-level languages like C or C++.

2.	Garbage Collection:
•	Python utilizes a garbage collector to reclaim memory occupied by objects that are no longer referenced and thus are unreachable. The garbage collector periodically runs in the background to free up memory from unused objects.

3.	Reference Counting:
•	Python uses a reference counting mechanism along with garbage collection. Each object in Python maintains a reference count, which tracks the number of references pointing to that object. When an object's reference count drops to zero, it indicates that the object is no longer in use, and the memory occupied by that object can be reclaimed.

4.	Memory Pool:
•	Python manages memory allocation through a private heap containing various memory pools for different types of objects. This helps in efficient memory allocation and management.

5.	Memory Optimization:
•	Python optimizes memory usage through techniques like memory sharing (for immutable objects like strings and tuples) and reuse of small integer objects (-5 to 256). This reduces the overhead of memory allocation for frequently used objects.


8)	What is the purpose continuing statement in python?
Answer :-
The continue statement is used to skip the rest of the current iteration of a loop (typically a for or while loop) and continue to the next iteration. Its primary purpose is to control the flow of execution within loops.
Key purposes of the continue statement include:
1.	Skipping Iterations: When encountering the continue statement, Python immediately stops executing the remaining code in the current loop iteration and proceeds directly to the next iteration.
2.	Selective Processing: It allows selective processing of loop iterations based on certain conditions. For example, you might use it to skip processing certain elements in a list or performing specific actions on certain types of data.

Here's a simple example to illustrate the use of continue:
for num in range(1, 11):
if num % 2 == 0:
continue  # Skip even numbers
print(num)
OUTPUT:-
1
3
5
7
9


9)	Write python program that swap two number with temp variable and without temp variable.
Answer :-
Swapping with a Temporary Variable
a = float(input("Enter the first number (a): "))
b = float(input("Enter the second number (b): "))
temp = a
a = b
b = temp
print(f"After swapping, a = {a} and b = {b}")

OUTPUT:-
Enter the first number (a):  12
Enter the second number (b):  23
After swapping, a = 23.0 and b = 12.0

Swapping without a Temporary Variable
a = float(input("Enter the first number (a): "))
b = float(input("Enter the second number (b): "))

a = a + b
b = a - b
a = a - b
print(f"After swapping, a = {a} and b = {b}")

OUTPUT:-
Enter the first number (a):  12
Enter the second number (b):  13
After swapping, a = 13.0 and b = 12.0

Explanation:
This method uses arithmetic operations. By adding a and b, the sum is stored in a. Then, b is assigned the difference a - b, effectively swapping the values. Finally, a is assigned the difference a - b to complete the swap.


10)	Write a Python program to find whether a given number is even or odd, print out an appropriate message to the user.
Answer :-
number = int(input("Enter a number: "))
if number % 2 == 0:
print(f"{number} is even.")
else:
print(f"{number} is odd.")

11)	Write a Python program to test whether a passed letter is a vowel or not.
Answer :-
letter = input("Enter a letter: ").lower()
if letter in 'aeiou':
print(f"{letter} is a vowel.")
else:
print(f"{letter} is not a vowel.")

OUTPUT:-
Enter a letter:  a
a is a vowel.

12)	Write a Python program to sum of three given integers. However, if two values are equal sum will be zero.
Answer :-
a = int(input("Enter the first integer: "))
b = int(input("Enter the second integer: "))
c = int(input("Enter the third integer: "))

if a == b or b == c or a == c:
sum = 0
else:
sum = a + b + c
print(f"The sum is: {sum}")

OUTPUT:-
Enter the first integer:  12
Enter the second integer:  13
Enter the third integer:  12
The sum is: 0

Enter the first integer:  12
Enter the second integer:  13
Enter the third integer:  14
The sum is: 39

13)	Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5.
Answer :-
a = int(input("Enter the first integer: "))
b = int(input("Enter the second integer: "))

if a == b or a + b == 5 or abs(a - b) == 5:
result = True
else:
result = False

print(result)

OUTPUT:-
Enter the first integer:  15
Enter the second integer:  15
True


14)	Write a python program to sum of the first n positive integers.
Answer :-
n = int(input("Enter a positive integer: "))
sum_n = 0
for i in range(1, n + 1):
sum_n += i
print(f"The sum of the first {n} positive integers is: {sum_n}")

OUTPUT:-
Enter a positive integer:  5
The sum of the first 5 positive integers is: 15

15)	Write a Python program to calculate the length of a string.
Answer :-
user_string = input("Enter a string: ")
string_length = len(user_string)
print(f"The length of the string is: {string_length}")

OUTPUT:-
Enter a string:  hey how
The length of the string is: 7

Another Way :-
user_string = input("Enter a string: ")
string_length = 0
for char in user_string:
string_length += 1
print(f"The length of the string is: {string_length}")

OUTPUT:-
Enter a string:  hey how
The length of the string is: 7

16)	Write a Python program to count the number of characters (character frequency) in a string
Answer :-
user_string = input("Enter a string: ")
char_frequency = {}

for char in user_string:
if char in char_frequency:
char_frequency[char] += 1
else:
char_frequency[char] = 1

for char, frequency in char_frequency.items():
print(f"'{char}': {frequency}")

OUTPUT:-
Enter a string:  HEY HOW
'H': 2
'E': 1
'Y': 1
' ': 1
'O': 1
'W': 1



17)	What are negative indexes and why are they used?
Answer :-
Negative indexes in Python are a way to index elements in sequences (such as lists, strings, and tuples) starting from the end of the sequence rather than the beginning. This feature is particularly useful for accessing elements from the end without needing to know the exact length of the sequence.
How Negative Indexes Work:
•	The index -1 refers to the last element of the sequence.
•	The index -2 refers to the second-to-last element, and so on.
For example, consider the list my_list = [10, 20, 30, 40, 50]:
•	my_list[-1] returns 50 (the last element).
•	my_list[-2] returns 40 (the second-to-last element).
Why Negative Indexes are Used:
1.	Convenience: Negative indexes provide a convenient way to access elements from the end of the sequence without calculating the offset from the start.
2.	Readability: Using negative indexes can make the code more readable and expressive, especially when the intent is to access elements relative to the end of the sequence.
3.	Avoid Errors: Negative indexes can help avoid errors related to calculating the length of the sequence and then accessing elements from the end.
Example Usage:
my_list = [10, 20, 30, 40, 50]

# Accessing elements using negative indexes
print(my_list[-1])  # Output: 50
print(my_list[-2])  # Output: 40
print(my_list[-3])  # Output: 30

Example with Strings:
my_string = "Hello, World!"

# Accessing characters using negative indexes
print(my_string[-1])  # Output: !
print(my_string[-2])  # Output: d
print(my_string[-3])  # Output: l

Slicing with Negative Indexes:
Negative indexes can also be used with slicing:
my_list = [10, 20, 30, 40, 50]

# Slicing the last three elements
print(my_list[-3:])  # Output: [30, 40, 50]

# Slicing from the second-to-last element to the end
print(my_list[-2:])  # Output: [40, 50]
Negative indexes are a powerful feature in Python that enhance the flexibility and readability of code when dealing with sequences.


18)	Write a Python program to count occurrences of a substring in a string.
Answer :-
main_string = input("Enter the main string: ")
substring = input("Enter the substring to count: ")
occurrences = main_string.count(substring)
print(f"The substring '{substring}' occurs {occurrences} times in the main string.")
OUTPUT :-
Enter the main string:  hey how are you
Enter the substring to count:  hey
The substring 'hey' occurs 1 time in the main string.


19)	Write a Python program to count the occurrences of each word in a given sentence
Answer :-
sentence = input("Enter a sentence: ")
words = sentence.lower().split()

word_frequency = {}

for word in words:
if word in word_frequency:
word_frequency[word] += 1
else:
word_frequency[word] = 1

for word, frequency in word_frequency.items():
print(f"'{word}': {frequency}")

OUTPUT:-
Enter a sentence:  hey, How are you
'hey,': 1
'how': 1
'are': 1
'you': 1


20)	Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.
Answer :-
string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")
new_string1 = string2[:2] + string1[2:]
new_string2 = string1[:2] + string2[2:]

result = new_string1 + ' ' + new_string2
print("Result:", result)

OUTPUT:-
Enter the first string:  hey how
Enter the second string:  hey fine
Result: hey how hey fine

21)	Write a Python program to add 'in' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead if the string length of the given string is less than 3, leave it unchanged.
Answer :-
user_string = input("Enter a string: ")

if len(user_string) >= 3:
if user_string.endswith('ing'):
user_string += 'ly'
else:
user_string += 'ing'
print("Result:", user_string)

OUTPUT :-
Enter a string:  string
Result: stringly

22)	Write a Python function to reverses a string if its length is a multiple of 4.
Answer :-
user_string = input("Enter a string: ")
if len(user_string) % 4 == 0:
reversed_string = user_string[::-1]
else:
reversed_string = user_string

print(reversed_string)

OUTPUT :-
Enter a string:  heyy
yyeh

23)	Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. If the string length is less than 2, return instead of the empty string.
Answer :-
user_string = input("Enter a string: ")
if len(user_string) < 2:
result = ''
else:
result = user_string[:2] + user_string[-2:]
print("Result:", result)

OUTPUT:-
Enter a string:  hey how
Result: heow


24)	Write a Python function to insert a string in the middle of a string.
Answer :-
def insert_string_middle(main_string, insert_string):
middle_index = len(main_string) // 2
new_string = main_string[:middle_index] + insert_string + main_string[middle_index:]
return new_string

main_string = input("Enter the main string: ")
insert_string = input("Enter the string to be inserted: ")
result = insert_string_middle(main_string, insert_string)
print(result)

OUTPUT :-
Enter the main string:  hey how are you?
Enter the string to be inserted:  who are you?
hey how who are you?are you?



25)	What is List? How will you reverse a list?
Answer :-
A list in Python is a built-in data type that is used to store multiple items in a single variable. Lists are ordered, mutable (changeable), and allow duplicate elements. They can contain items of different data types, including other lists.
Characteristics of Lists:
1.	Ordered: The items have a defined order that will not change unless explicitly modified.
2.	Mutable: The items can be changed, added, or removed after the list has been created.
3.	Allows Duplicates: Lists can contain duplicate elements.
4.	Indexing: Lists are indexed, and the first item has index [0], the second item has index [1], and so on.

Example :-
my_list = [1, 2, 3, 'apple', 4.5, [5, 6]]
print(my_list)

OUTPUT:-
[1, 2, 3, 'apple', 4.5, [5, 6]]

How to Reverse a List in Python
There are several ways to reverse a list in Python:
1.	Using the reverse() Method:
This method modifies the list in place.
Example :-
my_list = [1, 2, 3, 4, 5]
my_list.reverse()
print(my_list)  # Output: [5, 4, 3, 2, 1]

2.	Using Slicing:
This creates a new list that is the reverse of the original list.
Example :-
my_list = [1, 2, 3, 4, 5]
reversed_list = my_list[::-1]
print(reversed_list)  # Output: [5, 4, 3, 2, 1]

3.	Using the reversed() Function:
This returns an iterator that can be used to create a reversed list.
Example :-
my_list = [1, 2, 3, 4, 5]
reversed_list = list(reversed(my_list))
print(reversed_list)  # Output: [5, 4, 3, 2, 1]


26)	How will you remove last object from a list?
Answer :-
To remove the last object from a list in Python:-
1.	Using the pop() Method
The pop() method removes and returns the last item in the list if no index is specified.
Example :-
my_list = [1, 2, 3, 4, 5]
my_list.pop()
print(my_list)  # Output: [1, 2, 3, 4]

2.	Using the del Statement
The del statement can be used to delete the last item in the list by specifying its index.
Example :-
my_list = [1, 2, 3, 4, 5]
del my_list[-1]
print(my_list)  # Output: [1, 2, 3, 4]

3.	Using Slicing
You can create a new list that excludes the last item by slicing. This doesn't modify the original list but creates a new one.
Example :-
my_list = [1, 2, 3, 4, 5]
my_list = my_list[:-1]
print(my_list)  # Output: [1, 2, 3, 4]

27)	Suppose list1 is [2, 33, 222, 14, and 25], what is list1 [-1]?
Answer :-
list1 = [2, 33, 222, 14, 25]
print(list1[-1])
Output: 25

28)	Differentiate between append () and extend () methods?
Answer :-
Feature	append()	extend()
Purpose	Adds its argument as a single element to the end of the list.	Adds each element of its argument to the list.
Argument Type	Any type (object, list, tuple, etc.)	Iterable (list, tuple, set, etc.)
Modification	Increases the list length by 1, regardless of the argument's size.	Increases the list length by the number of elements in the iterable.
Example	my_list.append([1, 2, 3])	my_list.extend([1, 2, 3])
Resulting List	Original list with a single new element which is a list.	Original list with new elements from the argument added individually.
Example List Before	[a, b, c]	[a, b, c]
Example List After	[a, b, c, [1, 2, 3]]	[a, b, c, 1, 2, 3]



29)	Write a Python function to get the largest number, smallest num and sum of all from a list.
Answer :-
def list_num(numbers):
if numbers:
largest = max(numbers)
smallest = min(numbers)
total_sum = sum(numbers)
return largest, smallest, total_sum
else:
return None, None, 0

my_list = [10, 5, 17, 8, 3]
largest_num, smallest_num, sum_all = analyze_list(my_list)
print("List:", my_list)
print("Largest number:", largest_num)
print("Smallest number:", smallest_num)
print("Sum of all numbers:", sum_all)

OUTPUT:-
List: [2, 6, 33, 200, 100, 35]
Largest number: 200
Smallest number: 2
Sum of all numbers: 376



30)	How will you compare two lists?
Answer :-
To compare two lists in Python, you can use various methods depending on what comparison you want to perform whether they are equal, contain the same elements, or have elements in the same order.
1.	Equality Check (==):
Use the equality operator == to check if two lists are exactly equal, meaning they have the same elements in the same order.

Example :-
list1 = [1, 2, 3]
list2 = [1, 2, 3]

if list1 == list2:
print("Lists are equal")
else:
print("Lists are not equal")
OUTPUT :- Lists are equal

2.	Identity Check (is):
Use the identity operator is to check if two lists are the same object in memory.
Example :-
list1 = [1, 2, 3]
list2 = [1, 2, 3]

if list1 is list2:
print("Lists are identical")
else:
print("Lists are not identical")

OUTPUT :- Lists are not identical
3.	Comparison by Elements:
Use set operations or iteration to check if two lists contain the same elements, regardless of order.

Example :-
list1 = [1, 2, 3]
list2 = [3, 2, 1]

if set(list1) == set(list2):
print("Lists have the same elements")
else:
print("Lists do not have the same elements")

OUTPUT :- Lists have the same elements


31)	Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.
Answer :-
str_list = ['abc', 'xyz', 'aba', '1221', 'aa', 'x', 'abca']
count = 0

for s in str_list:
if len(s) >= 2 and s[0] == s[-1]:
count += 1
print("Number of strings:", count)

OUTPUT :- Number of strings: 4

32)	Write a Python program to remove duplicates from a list.
Answer :-
my_list = [1, 2, 3, 4, 2, 3, 5, 6, 1]
unique_list = []
for item in my_list:
if item not in unique_list:
unique_list.append(item)
print("Original List:", my_list)
print("List with Duplicates Removed:", unique_list)

OUTPUT:-
Original List: [1, 2, 3, 4, 2, 3, 5, 6, 1]
List with Duplicates Removed: [1, 2, 3, 4, 5, 6]


33)	Write a Python program to check a list is empty or not.
Answer :-
my_list = []
if len(my_list) == 0:
print("List is empty")
else:
print("List is not empty")

OUTPUT :-
List is empty



34)	Write a Python function that takes two lists and returns true if they have at least one common member.
Answer :-
def common_member(list1, list2):
for item1 in list1:
for item2 in list2:
if item1 == item2:
return True
return False
list1 = [1, 2, 3, 4, 5]
list2 = [5, 6, 7, 8, 9]
print(have_common_member(list1, list2))

list3 = [11, 22, 33]
list4 = [6, 7, 8, 9]
print(have_common_member(list3, list4))

OUTPUT :-
True
False

35)	Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30.
Answer :-
squares = [(i ** 2) for i in range(1, 31)]
print("First 5 elements:")
print(squares[:5])

print("\nLast 5 elements:")
print(squares[-5:])

OUTPUT:-
First 5 elements:
[1, 4, 9, 16, 25]

Last 5 elements:
[676, 729, 784, 841, 900]



36)	Write a Python function that takes a list and returns a new list with unique elements of the first list.
Answer :-
def elements(input_list):
unique_list = []
for item in input_list:
if item not in unique_list:
unique_list.append(item)
return unique_list

my_list = [1, 2, 2, 3, 4, 4, 5]
print(unique_elements(my_list))

OUTPUT :-
[1, 2, 3, 4, 5]

37)	Write a Python program to convert a list of characters into a string.
Answer :-
char_list = ['H', 'e', 'l', 'l', 'o']
char_string = ''.join(char_list)
print("Converted string:", char_string)

OUTPUT :-
Converted string: Hello



38)	Write a Python program to select an item randomly from a list.
Answer :-
import random
my_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']
random_item = random.choice(my_list)
print("Randomly selected item:", random_item)

OUTPUT :-
Randomly selected item: cherry



39)	Write a Python program to find the second smallest number in a list.
Answer :-
my_list = [45, 23, 11, 56, 78, 2, 10]
smallest = float('inf')
second_smallest = float('inf')
for num in my_list:
if num < smallest:
second_smallest = smallest
smallest = num
elif num < second_smallest and num != smallest:
second_smallest = num

print("Second smallest number:", second_smallest)

OUTPUT :-
Second smallest number: 10

40)	Write a Python program to get unique values from a list
Answer :-
my_list = [1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7]
unique_values = []
for item in my_list:
if item not in unique_values:
unique_values.append(item)
print("Unique values:", unique_values)

OUTPUT :-
Unique values: [1, 2, 3, 4, 5, 6, 7]

41)	Write a Python program to check whether a list contains a sub list
Answer :-
main_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
sub_list = [3, 4, 5]
found = False
for i in range(len(main_list) - len(sub_list) + 1):
if main_list[i:i + len(sub_list)] == sub_list:
found = True
break
if found:
print("Sublist found in the main list")
else:
print("Sublist not found in the main list")

OUTPUT :-
Sublist found in the main list

42)	Write a Python program to split a list into different variables.
Answer :-
my_list = [1, 2, 3, 4, 5]
a, b, c, d, e = my_list
print("Variables:", a, b, c, d, e)

OUTPUT :-
Variables: 1 2 3 4 5

43)	What is tuple? Difference between list and tuple.
Answer :-
Tuple:
A tuple in Python is an ordered collection of items, similar to a list. However, tuples are immutable, meaning once created, their content cannot be changed.
Syntax: Tuples are defined using parentheses () and comma , to separate elements.
Example: my_tuple = (1, 2, 3, 'a', 'b', 'c')

List vs. Tuple:
Feature	List	Tuple
Mutability	Mutable (can be changed after creation)	Immutable (cannot be changed after creation)
Syntax	Defined using square brackets []	Defined using parentheses ()
Elements	Elements can be of different data types	Elements can be of different data types
Performance	Slightly slower for access and iteration	Slightly faster for access and iteration
Use Cases	Use when you need a collection that can be modified	Use when you want to protect data from being modified accidentally
Examples	my_list = [1, 2, 3, 'a', 'b', 'c']	my_tuple = (1, 2, 3, 'a', 'b', 'c')



44)	Write a Python program to create a tuple with different data types.
Answer :-
my_tuple = (1, 'hello', 3.14, True)
print("Tuple with different data types:", my_tuple)

OUTPUT :-
Tuple with different data types: (1, 'hello', 3.14, True)

45)	Write a Python program to unzip a list of tuples into individual lists.
Answer :-
list_of_tuples = [(1, 'a'), (2, 'b'), (3, 'c')]
unzipped = list(zip(*list_of_tuples))
print("Unzipped lists:")
for item in unzipped:
print(list(item))

OUTPUT :-
Unzipped lists:
[1, 2, 3]
['a', 'b', 'c']


46)	Write a Python program to convert a list of tuples into a dictionary.
Answer :-
list_of_tuples = [('a', 1), ('b', 2), ('c', 3)]
my_dict = dict(list_of_tuples)
print("Dictionary:", my_dict)

OUTPUT :-
Dictionary: {'a': 1, 'b': 2, 'c': 3}


47)	How will you create a dictionary using tuples in python?
Answer :-
list_of_tuples = [('a', 1), ('b', 2), ('c', 3)]
my_dict = dict(list_of_tuples)
print("Dictionary:", my_dict)

OUTPUT :-
Dictionary: {'a': 1, 'b': 2, 'c': 3}


48)	Write a Python script to sort (ascending and descending) a dictionary by value.
Answer :-
my_dict = {'a': 3, 'b': 1, 'c': 2}
sorted_dict_asc = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print("Dictionary sorted by value (ascending):", sorted_dict_asc)

OUTPUT :-
Dictionary sorted by value (ascending): {'b': 1, 'c': 2, 'a': 3}


49)	Write a Python script to concatenate following dictionaries to create a new one.
Answer :-
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict3 = {'e': 5, 'f': 6}
new_dict = {}
new_dict.update(dict1)
new_dict.update(dict2)
new_dict.update(dict3)
print("Concatenated dictionary using update():", new_dict)

OUTPUT :-
Concatenated dictionary using update(): {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}


50)	Write a Python script to check if a given key already exists in a dictionary.
Answer :-
my_dict = {'a': 1, 'b': 2, 'c': 3}
key_to_check = 'b'
if key_to_check in my_dict:
    print(f"Key '{key_to_check}' exists in the dictionary.")
else:
    print(f"Key '{key_to_check}' does not exist in the dictionary.")

OUTPUT :- Key 'b' exists in the dictionary.

51)	How Do You Traverse Through a Dictionary Object in Python?
Answer :-
my_dict = {'a': 1, 'b': 2, 'c': 3}
# Traversing through keys
for key in my_dict:
    print("Key:", key)

# Traversing through values
for value in my_dict.values():
    print("Value:", value)

# Traversing through values
for value in my_dict.values():
    print("Value:", value)

OUTPUT :- 
Key: a
Key: b
Key: c
Value: 1
Value: 2
Value: 3
Value: 1
Value: 2
Value: 3


52)	How Do You Check the Presence of a Key in A Dictionary?
Answer :-
my_dict = {'a': 1, 'b': 2, 'c': 3}
key_to_check = 'b'
if key_to_check in my_dict:
    print(f"Key '{key_to_check}' exists in the dictionary.")
else:
    print(f"Key '{key_to_check}' does not exist in the dictionary.")

OUTPUT :- 
Key 'b' exists in the dictionary.


53)	Write a Python script to print a dictionary where the keys are numbers between 1 and 15.
Answer :-
my_dict = {i: i**2 for i in range(1, 16)}
print("Dictionary with keys from 1 to 15 and their squares as values:")
print(my_dict)

OUTPUT :- 
Dictionary with keys from 1 to 15 and their squares as values:
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225}

54)	Write a Python program to check multiple keys exists in a dictionary
Answer :-
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
keys_to_check = ['a', 'b', 'e']
all_keys_exist = all(key in my_dict for key in keys_to_check)
if all_keys_exist:
    print(f"All keys {keys_to_check} exist in the dictionary.")
else:
    print(f"Not all keys {keys_to_check} exist in the dictionary.")

OUTPUT :- 
Not all keys ['a', 'b', 'e'] exist in the dictionary.

55)	Write a Python script to merge two Python dictionaries
Answer :-
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict1.update(dict2)
print("Merged dictionary using update():", dict1)

OUTPUT :- 
Merged dictionary using update(): {'a': 1, 'b': 2, 'c': 3, 'd': 4}

56)	Write a Python program to map two lists into a dictionary Sample output: Counter ({'a': 400, 'b': 400,’d’: 400, 'c': 300}).
Answer :-
keys = ['a', 'b', 'c', 'd']
values = [400, 400, 300, 400]
mapped_dict = dict(zip(keys, values))
print("Mapped dictionary:", mapped_dict)

OUTPUT :- 
Mapped dictionary: {'a': 400, 'b': 400, 'c': 300, 'd': 400}

57)	Write a Python program to find the highest 3 values in a dictionary
Answer :-
my_dict = {'a': 50, 'b': 100, 'c': 75, 'd': 125, 'e': 60}
highest_values = sorted(my_dict.values(), reverse=True)[:3]
print("The highest 3 values in the dictionary are:", highest_values)

OUTPUT :- 
The highest 3 values in the dictionary are: [125, 100, 75]


58)	Write a Python program to combine values in python list of dictionaries.
Sample data: [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, o {'item': 'item1', 'amount': 750}]
Expected Output:
Counter ({'item1': 1150, 'item2': 300})
Answer :-
from collections import Counter
data = [
    {'item': 'item1', 'amount': 400},
    {'item': 'item2', 'amount': 300},
    {'item': 'item1', 'amount': 750}
]
combined_data = Counter()
for entry in data:
    combined_data[entry['item']] += entry['amount']

print("Combined values in the list of dictionaries:")
print(combined_data)

OUTPUT :-
Combined values in the list of dictionaries:
Counter({'item1': 1150, 'item2': 300})

59)	Write a Python program to create a dictionary from a string.
Note: Track the count of the letters from the string.
Answer :-
input_string = "hello world"
char_count = {}

for char in input_string:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1
print("Dictionary with character counts:")
print(char_count)

OUTPUT  :- 
Dictionary with character counts:
{'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}

60)	Sample string:
'w3resource' Expected output:
{'3': 1,’s’: 1, 'r': 2, 'u': 1, 'w': 1, 'c': 1, 'e': 2, 'o': 1}
Answer :-
input_string = 'w3resource'
char_count = {}
for char in input_string:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1
print("Dictionary with character counts:")
print(char_count)

OUTPUT :- 
Dictionary with character counts: {'w': 1, '3': 1, 'r': 2, 'e': 2, 's': 1, 'o': 1, 'u': 1, 'c': 1}

61)	Write a Python function to calculate the factorial of a number (a nonnegative integer)
Answer :-
def factorial(n):
    # Base case: factorial of 0 is 1
    if n == 0:
        return 1
    # Recursive case: compute factorial
    else:
        return n * factorial(n - 1)

# Test the function
number = 5  # Example: calculate 5!
print(f"The factorial of {number} is:", factorial(number))

OUTPUT :-
The factorial of 5 is: 120

62)	Write a Python function to check whether a number is in a given range
Answer :-
def check_range(num, start, end):
    if start <= num <= end:
        return True
    else:
        return False
number = 10
start_range = 5
end_range = 15
if check_range(number, start_range, end_range):
    print(f"{number} is in the range [{start_range}, {end_range}]")
else:
    print(f"{number} is not in the range [{start_range}, {end_range}]")

OUTPUT :- 
10 is in the range [5, 15]


63)	Write a Python function to check whether a number is perfect or not.
Answer :-
def is_perfect_number(num):
    if num <= 1:
        return False
    sum_of_divisors = 0
    for i in range(1, num):
        if num % i == 0:
            sum_of_divisors += i
    if sum_of_divisors == num:
        return True
    else:
        return False
number = 28  
if is_perfect_number(number):
    print(f"{number} is a perfect number.")
else:
    print(f"{number} is not a perfect number.")

OUTPUT :- 28 is a perfect number.

64)	Write a Python function that checks whether a passed string is palindrome or not
Answer :-
def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

input_string = "Madam"
if is_palindrome(input_string):
    print(f"{input_string} is a palindrome.")
else:
    print(f"{input_string} is not a palindrome.")

OUTPUT :- Madam is a palindrome.

65)	How Many Basic Types of Functions Are Available in Python?
Answer :-
there are two basic types of functions:
1.	Built-in Functions: These are functions that are already defined in Python and are available for use. Examples include print(), len(), type(), and range().
Example :- 
print("Hello, World!")  # This uses the built-in print() function

2.	User-defined Functions: These are functions that users create to perform specific tasks. They are defined using the def keyword followed by the function name and parentheses containing any parameters.
Example :- 
	def greet(name):
    	return f"Hello, {name}!"
print(greet("Alice"))  # This calls the user-defined greet() function

66)	How can you pick a random item from a list or tuple?
Answer :-
import random
my_list = [1, 2, 3, 4, 5]
random_item = random.choice(my_list)
print("list:",random_item)

my_tuple = [1, 2, 3, 4, 5]
random_item = random.choice(my_tuple)
print("Tuple:",random_item)

OUTPUT:- 
list: 2
Tuple: 4

67)	How can you pick a random item from a range?
Answer :-
import random
range_list = list(range(1, 11))
random_item = random.choice(range_list)
print(random_item)

OUTPUT :- 3

68)	How can you get a random number in python?
Answer :-
import random
random_number = random.randint(1, 10)
print(random_number)

OUTPUT :- 4


69)	How will you set the starting value in generating random numbers?
Answer :-



70)	How will you randomize the items of a list in place?
Answer :-
import random
my_list = [1, 2, 3, 4, 5]
list1 = random.sample(my_list, len(my_list))
print("list:", list1)

OUTPUT :-
list: [1, 5, 4, 3, 2]
1.Write a Python program to check if a number is positive, negative or zero.
# x = int(input("Enter the number : ")) 
# print('Number is postive') if x>0 else print('Number is negative') if x <0 else print('Number is zero')

# 2. Write a Python program to get the Factorial number of given numbers.
# x = int(input("Enter the number : ")) 
# facto = 1
# while(x>0):
#     facto = facto*(x)
#     x-= 1
# print(f'The factorial of given number is {facto}')

# 3. Write a Python program to get the Fibonacci series of given range. 
# x = int(input("Enter the number : "))
# a = 0
# b = 1
# for i in range(x):
#     print(a)
#     c = a + b 
#     a = b
#     b = c

# 4. Write python program that swap two number with temp variable and without temp variable. 
# x = 25
# y = 50
# z = y
# y = x
# x = z
# print(f'The numbers after swapping is {z} and {y}')
# x = x + y 
# y = x - y 
# x = x - y
# print('The number after swapping is {} and {}'.format(x,y))


# 5.  Write a Python program to find whether a given number is even or odd, print out an appropriate message to the user. 
# x = int(input("Enter the number : "))
# print("The number is odd") if(x%2!=0) else print("The number is even")


# 6. Write a Python program to test whether a passed letter is a vowel or not. 
# vowel = ["a","e","i","o","u"]
# def check(alphabets):
#     x = alphabets.lower()
#     if x in vowel:
#         print(f'The given alphabet is an vowel')
#     else:
#         print(f'The given alphabet is not an vowel')
# obj1 = check("I")


# 7. Write a Python program to sum of three given integers. However, if two values are equal sum will be zero. 
# x = int(input("Enter the first integer : "))
# y = int(input("Enter the first integer : "))
# z = int(input("Enter the first integer : "))
# if (x==y or y==z or x==z):
#     print("The sum of three integer is zero beacause any two values are equal")
# else:
#     a = (x,y,z)
#     b = sum(a)
#     print(f'The sum of three interger is {b}')


# 8. Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5. 
# x = int(input("Enter the first integer : "))
# y = int(input("Enter the first integer : "))
# def check(x,y):
#     summation = x + y
#     difference = x- y 
#     if (x==y or summation==5 or abs(difference)== 5 ):
#         return True
#     else:
#         return False
# print(check(x,y))


# 9. Write a python program to sum of the first n positive integers. 
# n = int(input("Enter the first n numbers: "))
# def addition(n):
#     x = n*(n+1)/2
#     print(x)
# addition(n)


# 10. Write a Python program to calculate the length of a string. 
# x = "HELLO INDIA"
# count = 0
# for i in x:
#     count+= 1
# print(count)


# 11.  Write a Python program to count the number of characters (character frequency) in a string.
# from collections import Counter
# x = "HELLO"
# z = Counter(x)
# print(z)


# 12. Write a Python program to count occurrences of a substring in a string.
# string1 = input("Write anything you want : ")
# substring1 = input("write anything for substring: ")
# def count_of_ocuurence_of_substring(string1,substring1):
#     x = string1.count(substring1)
#     return x
# y = count_of_ocuurence_of_substring(string1,substring1)
# print(f'The ocuurence of {substring1} in {string1} is {y} times ')


# 13. Write a Python program to count the occurrences of each word in a given seqeunce.
# sentence = input("Enter a sentence: ")
# words = sentence.lower().split()

# word_frequency = {}

# for word in words:
#     if word in word_frequency:
#         word_frequency[word] += 1
#     else:
#         word_frequency[word] = 1

# for word, frequency in word_frequency.items():
#     print(f"'{word}': {frequency}")


# 14. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. 
# def swapping_of_words(string1,string2):
#     x = string1[:2] + string2[2:]
#     y = string2[:2] + string1[2:]
#     res = y + " " + x
#     print(res)
# swapping_of_words("ABCD","XYZ")


# 15. Write a Python program to add 'in' at the end of a given string (length 
# should be at least 3). If the given string already ends with 'ing' then 
# add 'ly' instead if the string length of the given string is less than 3, 
# leave it unchanged. 
# def adding(string1):
#     x = len(string1)
#     if x>=3:
#         if string1[-3:].lower() == "ing":
#             return string1 + "ly"
#         else:
#             return string1 + "in"
#     else:
#         return string1 
# obj1 = adding("GOODING")
# print(obj1)


# 16. Write a Python function to reverses a string if its length is a multiple of 4. 
# string1 = "hell0"
# x = string1[ : : -1]
# y = len(x)
# if (y%4 == 0):
#     print(x)
# else:
#     print("Length of list is not a mutiple of 4 cant't reverse the given string")


# 17. Write a Python program to get a string made of the first 2 and the last 
# 2 chars from a given a string. If the string length is less than 2, return 
# instead of the empty string. 
# def check(string1):
#     x = len(string1)
#     if x > 2 :
#         y = string1[ : 2] + string1[-2: ]
#         return y
#     else:
#         return "The string is Empty"
# obj1 = check("Krishna")
# print(obj1)


# 18. Write a Python function to insert a string in the middle of a string. 
# def inserting_string(original_string, string_to_insert):
#     x = len(original_string)//2
#     result = original_string[ : x] + string_to_insert + original_string[ x: ]
#     return result
# obj1 = inserting_string("Hello, world" ," beautiful")
# print(obj1)


# 19.  Write a Python function to get the largest number, smallest num and sum of all from a list.
# list = [1,2,3,4,55,34,22,2,-5]
# def check(list):
#     x = max(list)
#     print(f'The maximum no in list is : {x}')
#     y = min(list)
#     print(f'The minimum no in list is : {y}')
#     z = sum(list)
#     print(f'The sum of all no in list is : {z}')
# check(list)


# 20. ) Write a Python program to count the number of strings where the string 
# length is 2 or more and the first and last character are same from a given list of strings.
# list = ["ABC","AA","1221","DDCD","123"]
# count = 0
# for i in list:
#     if len(i) >=2 and i[0] == i[-1] :
#         count+= 1
# print(f'The count of strong is : {count}')


# 21. Write a Python program to remove duplicates from a list. 
# list = [1,2,3,1,1,4,5,"A","B",5,"B",8.9,90,8.9,"K","R"]
# unique_list = []
# for i in list:
#     if i not in unique_list:
#         unique_list.append(i)
# print(f'The orginal list is {list} and unique list is {unique_list}')


# 22. Write a Python program to check a list is empty or not. 
# x = int(input("Enter the total no of elements you want to add in list : "))
# list = []
# i = 1
# while(i<=x):
#     y = int(input(f'Enter the  elements : '))
#     list.append(y)
#     i+= 1
# if len(list) == 0:
#     print("List is empty")
# else:
#     print("List is not empty")


# 23. Write a Python function that takes two lists and returns true if they have at least one common member. 
# def checks(list1,list2):
#     for i in list1:
#         for j in list2:
#             if i == j:
#                 return True
#             else:
#                 return False
# list1 = [1,2,3,4,5,66]
# list2 = [5,88,22]
# obj1 = checks(list1,list2)
# print(obj1)


# 24. Write a Python program to generate and print a list of first and last 5 
# elements where the values are square of numbers between 1 and 30. 
# list = [x**2 for x in range(1,31)]
# y = list[ :6] + list[-5: ]
# print(y)


# 25. Write a Python program to convert a list of characters into a string. 
# list = ["H","e","l","l","o","P","y","h","t","o","n"]
# x = "".join(list)
# print(x)


# 26. Write a Python program to select an item randomly from a list. 
# list = [1,2,3,4,5,"a",6.7]
# import random
# y = random.choice(list)
# print(y)


# 27. Write a Python program to find the second smallest number in a list. 
# x = [22,23,24,25,33,24,11,23,44]
# x.sort()
# print(x[1])


# 28. Write a Python program to check whether a list contains a sub list 
# list = [1,2,3,4,5,6,7,8,915]
# sub_list = [5,6,7]
# result  = False
# for i in range(len(list) - len(sub_list) + 1):
#     if list[i : i + len(sub_list)] == sub_list:
#         result = True
#         break
# if result:
#     print("Yes, list contains a sublist")
# else:
#     print("NO, list does not contain sublist")



# 29. Write a Python program to split a list into different variables.
# list = [1,2,3,4,"A",3.5,"22"]
# a,b,c,d,e,f,g = list
# print("variables are : ",a,b,c,d,e,f,g) 


# 30. Write a Python program to create a tuple with different data types. 
# tuple1 = (1,"A","2", 4.9,True,2.0004)
# print(tuple1)


# 31. Write a Python program to unzip a list of tuples into individual lists. 
# x = [("Krishna",100),("Vishal",88),("Amit",97)]
# y = list(zip(*x))
# for i in y:
#     print(list(i))


# 32. Write a Python program to convert a list of tuples into a dictionary. 
# x = [("Krishna",100),("Vishal",88),("Amit",97)]
# y = dict(x)
# print(y)


# 34. Write a Python script to sort (ascending and descending) a dictionary by value. 
# x = {"A":100 , "B":180 , "C":50 , "D":200}
# sorted_dict_asc = dict(sorted(x.items(), key=lambda item: item[1]))
# print("Dictionary sorted by value (ascending):", sorted_dict_asc)


# 35. Write a Python script to concatenate following dictionaries to create a new one. 
# dict1 = {'a': 1, 'b': 2}
# dict2 = {'c': 3, 'd': 4}
# dict3 = {'e': 5, 'f': 6}
# dict4 = {}
# dict4.update(dict1)
# dict4.update(dict2)
# dict4.update(dict3)
# print(dict4)
 



  
